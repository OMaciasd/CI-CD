parameters:
- name: motor
  displayName: Motor
  type: string
  default: postgres
- name: db_name
  displayName: DB Name
  type: string
  default: db_tiendas
- name: table
  displayName: Tabla
  type: string
  default: clientes
- name: query
  displayName: Query
  type: string
  default: SELECT * FROM tienda1.clientes
- name: mail
  displayName: Email
  type: string
  default: omaciasnarvaez@gmail.com

pool:
  vmImage: 'windows-latest'

steps:

- script: echo "El motor es ${{ parameters.motor }} la base de datos es ${{ parameters.db_name }} la tabla es ${{ parameters.table }} el query es ${{ parameters.query }} y el correo es ${{ parameters.mail }}"

- task: Bash@3
  displayName: Query por CLI
  inputs:
    targetType: 'inline'
    script: |
      if [ -x "$(command -v psql)" ]; then
        PGPASSWORD=$(DB_PASSWORD) psql -h "$(DB_HOST)" -p "$(DB_PORT)" -d "${{ parameters.db_name }}" -U "$(DB_USER)" -c "${{ parameters.query }}" -t -A -F"," -o "psql_query_result.csv"
        echo "Consulta finalizada. Los resultados se han guardado en query_result.csv"
      else
        echo 'psql is not installed.'
      fi

- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'

- task: Bash@3
  displayName: Terraform init
  inputs:
    targetType: 'inline'
    script: |
      terraform init

- task: Bash@3
  displayName: Terraform apply (Query por Terraform)
  inputs:
    targetType: 'inline'
    script: |
      terraform apply \
      -var host=$(DB_HOST) \
      -var db_name=${{ parameters.db_name }} \
      -var username=$(DB_USER) -var password=$(DB_PASSWORD) \
      -var db_query='${{ parameters.query }}' \
      -var sslmode=require \
      -auto-approve

- task: CopyFiles@2
  displayName: Copiando archivos
  inputs:
    Contents: '*.csv'
    TargetFolder: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  displayName: Publicando archivos
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'query'
    publishLocation: 'Container'
